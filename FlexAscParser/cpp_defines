#define AS_INTERFACE(type, base) \
_as_interface_##base(type *target) : m_target(target) { m_target->retain(); } \
~_as_interface_##base() { m_target->release(); } \
void _as_gc_mark() { if (_as_gc_mark_needed()) { base::_as_gc_mark(); AS_GC_MARK(m_target); }} \
private: type *m_target; \
friend class type;

#define AS_INTERFACE_REF(type) \
class type##_ref : public AsObjectRef<type> \
{ \
public: \
    type##_ref() : AsObjectRef() {} \
    template <class T> type##_ref(const AsObjectRef<T>& other) : AsObjectRef(other->_as_box_##type()) {} \
    type##_ref(const AsObjectRef<AsObject>& other) : AsObjectRef(other) {} \
    type##_ref(type* obj) : AsObjectRef(obj) {} \
    explicit type##_ref(bool isStatic) : AsObjectRef(isStatic) {} \
    template <class T> inline type##_ref operator= (const T& other) { set(other->_as_box_##type()); return *this; } \
    inline type##_ref operator= (const AsObjectRef<AsObject>& other) { set(other); return *this; } \
    inline type##_ref operator= (const type##_ref& other) { set(other); return *this; } \
    template <class T> inline operator AsObjectRef<T> () \
    { \
        type* obj = (type*)m_object; \
        return T::_as_unbox(obj); \
    } \
};

#define AS_OBJECT_REF_COMMON(type, objectType) \
type() : AsObjectRef() {} \
type(const AsObjectRefBase& other) : AsObjectRef(other) {} \
type(const type& other) : AsObjectRef(other) {} \
type(objectType* obj) : AsObjectRef(obj) {} \
explicit type(bool isStatic) : AsObjectRef(isStatic) {}

#define AS_FOREACH(type, var, collection) \
{ _V_##type##_ref __##var##s_ = collection; \
if (__##var##s_ != AS_NULL) { for(_as_AsRefVector<type##_ref>::Iterator it = (__##var##s_)->iterator(); it.hasNext();) { type##_ref var = it.next();

#define AS_PRIMITIVE_FOREACH(type, var, collection) \
{ _V_##type##_ref __##var##s_ = collection; \
if (__##var##s_ != AS_NULL) { for(AsVector<type>::Iterator it = (__##var##s_)->iterator(); it.hasNext();) { type var = it.next();

#define AS_FOREACH_END \
}}}